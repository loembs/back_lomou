spring.application.name=atelier
server.port=${PORT:8080}

# --- Base de données PostgreSQL (Render, Railway, etc.) ---
spring.datasource.url=jdbc:postgresql://dpg-d1sjcgnfte5s73fs3u90-a.oregon-postgres.render.com:5432/loumo_002?charSet=UTF-8
spring.datasource.username=loembs
spring.datasource.password=6IfgnuLZG33PySVKX5rHzSP55V17dkQ1
# ---spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.connection.charSet=UTF-8
spring.jpa.properties.hibernate.connection.useUnicode=true
spring.jpa.properties.hibernate.connection.characterEncoding=UTF-8
spring.datasource.hikari.connection-init-sql=SET NAMES 'UTF8'
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000
# ---spring.datasource.sql-script-encoding=UTF-8
# Initialisation de la base de données
# En production (Render), on utilise validate pour éviter les conflits
# En développement, on peut utiliser update
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:validate}
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
# Initialisation des données (seulement en développement)
spring.sql.init.mode=${SQL_INIT_MODE:never}
spring.sql.init.data-locations=classpath:data.sql
spring.jpa.defer-datasource-initialization=${DEFER_DATASOURCE_INIT:false}

# --- Cloudinary ---
cloudinary.cloud_name=dprbhsvxl
cloudinary.api_key=165725796195537
cloudinary.api_secret=bTB4_DtMqLRgg2ZngjQhaP_w_B4

# --- Meshy ---
meshy.api_key=msy_GSjjLMxlPtCKpwvMu68DBr4rWsFkuBaVjVaL

# --- Upload ---
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB

# --- Timezone (facultatif) ---
spring.jackson.time-zone=Africa/Dakar

# --- JWT Configuration ---
jwt.secret=loumoSecretKey2024VerySecureAndLongEnoughForHS256Algorithm
jwt.expiration=86400000

# --- OAuth2 Configuration (Google) ---
spring.security.oauth2.client.registration.google.client-id=your-google-client-id
spring.security.oauth2.client.registration.google.client-secret=your-google-client-secret
spring.security.oauth2.client.registration.google.scope=email,profile

# --- CORS Configuration (gérée par SecurityConfig) ---
# spring.web.cors.allowed-origins=*
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
# spring.web.cors.allowed-headers=*
